generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch", "metrics", "postgresqlExtensions", "tracing", "views"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
}

generator dbml {
  provider            = "prisma-dbml-generator"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "Shooper Travel NMB"
  outputName          = "shooperTravelNMB-server.dbml"
  projectName         = "Shooper Travel NMB"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext(schema: "public"), pgcrypto, uuid_ossp(map: "uuid-ossp", schema: "public")]
}

enum Role {
  passenger
  driver
}

enum RideStatus {
  pending
  confirmed
  completed
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  email     String    @unique
  password  String
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  driver    Driver?
  ride      Ride[]
}

model Driver {
  id          String  @id @default(uuid()) @db.Uuid
  userId      String  @unique @db.Uuid
  description String
  vehicle     String
  rating      String
  tax         Decimal
  minKm       Int
  user        User    @relation(fields: [userId], references: [id])
  ride        Ride[]
}

model Ride {
  id          String     @id @default(uuid()) @db.Uuid
  passengerId String     @db.Uuid
  driverId    String     @db.Uuid
  startPoint  String
  endPoint    String
  price       Float
  status      RideStatus
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  passenger   User       @relation(fields: [passengerId], references: [id])
  driver      Driver     @relation(fields: [driverId], references: [id])
}
